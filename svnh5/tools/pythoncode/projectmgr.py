# coding=utf-8 import os,os.path;from biplist import *;import time;import tool;import xlsdic;import sys;import re;reload(sys);sys.setdefaultencoding( "utf-8" );import json;import tool;import updateproject;import urllib;errorcodes={};errorcodes[1001]=u'账号不存在'errorcodes[1002]=u'密码错误'errorcodes[1003]=u'用户已存在'errorcodes[1004]=u'权限不足'errorcodes[1009]=u'管理员口令错误'errorcodes[2001]=u'请完成渠道配置'errorcodes[2002]=u'请完成服务器网络配置'errorcodes[2003]=u'请完成商品配置'errorcodes[2004]=u'请完成热更新设置' errorcodes[2005]=u'请先添加平台服' errorcodes[2006]=u'请先添加游戏服' errorcodes[3001]=u'此宏已存在' errorcodes[4001]=u'此ip标签已存在' errorcodes[5001]=u'此产品标签已存在' errorcodes[7001]=u'此文件功能已存在' errorcodes[8001]=u'文件不存在' errorcodes[9001]=u'不能重复点赞' errorcodes[10001]=u'子游戏code已存在' errorcodes[10002]=u'此子游戏不存在' errorcodes[11001]=u'此模块已存在' errorcodes[11002]=u'模块不存在' errorcodes[11003]=u'重复添加模块成员' errorcodes[11004]=u'未发现相关成员信息' errorcodes[11005]=u'文档不存在'  errorcodes[12001]=u'此子游戏协议已存在'  errorcodes[13001]=u'此sql标签已存在' errorcodes[14001]=u'此redis标签已存在' errorcodes[15001]=u'此平台服务器标签已存在' errorcodes[16001]=u'此游戏服类型存在' localSettingFileName='localsetting.json'productcfg_dir='productcfg'; #创建配置文件夹localsettingdir='assets/resources/Configs/AppStart'; if not os.path.exists(localsettingdir):	os.mkdir(localsettingdir); if not os.path.exists(productcfg_dir):	os.mkdir(productcfg_dir);  req=urllib.urlopen("http://192.168.1.241:2018/pythonclient?opid=getcfg");reqstr=req.read(); msg=json.loads(reqstr); errcode = msg['code']data=msg['data']productsettings=data['productsettings']tmpchannelsettings=data['channelsettings']channelsettings={};for v in tmpchannelsettings:	channelsettings[v['macro']]=v;tmpipsettings=data['ipsettings']ipsettings={};for v in tmpipsettings:	ipsettings[v['iptag']]=v;tmpplatsvrsettings=data['platsvrsettings']platsvrsettings={};for v in tmpplatsvrsettings:	platsvrsettings[v['tag']]=v;tmpgamesvrsettings=data['gamesvrsettings']gamesvrsettings={};for v in tmpgamesvrsettings:	gamesvrsettings[v['tag']]=v;tmpsubgames=data['subgames']subgames={};for v in tmpsubgames:	subgames[v['code']]=v;if errcode:	print errorcodes[errcode];	os.exit(); totalCfg={};for v in productsettings: 	channelItem=channelsettings[v['macro']];	platSvrItem=platsvrsettings[v['platsvr']] 	cfgIpItem=ipsettings[v['cfgtag']]	hotUrlItem=ipsettings[v['hoturltag']]	cfgItem={};	cfgItem['platSvrHost']=platSvrItem['ip'];	cfgItem['platSvrPort']=platSvrItem['port'];	cfgItem['gameSvrTag']=v['gamesvr'];	cfgItem['payTest']=v['paytest'];	cfgItem['payMode']=v['paymode'];	cfgItem['hotUrl']=hotUrlItem['url'];	totalCfg[v['producttag']]=cfgItem;for k,v in totalCfg.iteritems(): 	tool.saveDicToJson(v,'%s/%s.json'%(productcfg_dir,k));  import commands;class Cls:	def showPackMode(self):		while(1):			print(u"1.release模式");			print(u"2.debug模式");			mode="";			a=raw_input();			proj_dir=self.proj_item['proj_dir'];			proj_tag=self.proj_item['macro'];			#特殊渠道要armeabis-v7a之类的			armeabis='';			print("macro="+proj_tag);							rpos=-1;			if proj_tag.find('_')!=-1:				rpos=proj_tag.rindex('_');			if rpos!=-1:				proj_tag=proj_tag[0:rpos];			else:				proj_tag="";			if a=='1':				mode="release"; 			elif a=='2':				mode="debug"; 			else:				continue;			#修改标签			self.changeGameTag();			print(u"修改了res/localsetting.json重的devmode为"+self.net_item['tag']);			pack_cmd="echo \"------ start build %s and run ------\"\n\			call cocos run -p android -j 4 --proj-dir frameworks/runtime-src/%s  -m %s --ndk-mode %s  --ap android-20  --app-abi armeabi%s --compile-script 0 -o ../runtime/android/\n\			echo \"------ build release end ------\"\n\			pause"%(mode,proj_dir,mode,mode,armeabis);			os.chdir("publish");#表示上级目录			filename="quick_build_"+mode+"_"+proj_tag+".bat";			f=file(filename,"w");			f.write(pack_cmd);			f.close();			os.system(filename);			os.chdir("..");#表示上级目录			break;	def changeGameTag(self):		settingDic={};		settingDic['logenable']=True;		settingDic['producttag']=self.product['producttag'];		cfgIpItem=ipsettings[self.product['cfgtag']]		settingDic['cfgurl']=cfgIpItem['url'];		tool.saveDicToJson(settingDic,'%s/%s'%(localsettingdir,localSettingFileName)); 		print(u"配置生成成功,配置文件为%s"%('%s/%s'%(localsettingdir,localSettingFileName)))	def chosePackOpTion(self):		#显示操作选项		while(1): 			print(u"xxxxxxxxxxxxxxxxxxx操作xxxxxxxxxxxxxxxxxxxx"); 			print(u"输入数字选择具体操作");			print(u"1.将开发标签切换到此标签");  			a=raw_input();			if a=='1':				self.changeGameTag(); 				exit(0);	def showDetail(self): 		print(u"详情如下:"); 		#生成当前选项的细节 		channelItem=channelsettings[self.product['macro']];		platSvrItem=platsvrsettings[self.product['platsvr']]		gameSvrItem=gamesvrsettings[self.product['gamesvr']]		cfgIpItem=ipsettings[self.product['cfgtag']]		hotUrlItem=ipsettings[self.product['hoturltag']]		print(u"xxxxxxxxxxxxxxxxxxxxx工程配置xxxxxxxxxxxxxxxxxxxxxxxxx")		print("产品标签:%s"%(self.product['producttag']));		print("创建者:%s"%(self.product['author']));		print("产品说明:%s"%(self.product['des']));		print("平台服HOST:%s"%(platSvrItem['ip'])); 		print(u'平台服端口:'+"%d"%(platSvrItem['port']));		print("游戏服HOST:%s"%(gameSvrItem['host'])); 		print("配置服url:%s"%(cfgIpItem['url'])); 		print("热更服url:%s"%(hotUrlItem['url'])); 		print(u'支付测试开关:'+"%d"%(self.product['paytest']));		print(u'支付模式:'+"%d"%(self.product['paymode']));		print(u"xxxxxxxxxxxxxxxxxxxxxxx打包配置xxxxxxxxxxxxxxxxxxxxxxxxxxx")		print("BunddleId:%s"%(channelItem['appid'])); 		print("包名字:%s"%(channelItem['name'])); 		print("系统:%s"%(channelItem['os'])); 		print("原生工程路径:%s"%(channelItem['dir'])); 		print(u'逻辑版本号:'+"%d"%(channelItem['lversion']));		print("显示版本号:%s"%(channelItem['versionstr'])); 		self.chosePackOpTion();	def showMainMenu(self):		#显示操作选项		index=0;		while(1): 			print(u"xxxxxxxxxxxxxxxxxxx项目列表xxxxxxxxxxxxxxxxxxxx");			for v in productsettings:				index=index+1;				print("%d."%(index)+u",标签:"+v['producttag']+u",说明:"+v['des']+u",工程:"+v['macro']+u",平台服:"+v['platsvr']+u",游戏服:"+v['gamesvr']+u",创建人:"+v['author']);			print(u"请输入数字选择工程");			a=raw_input();			index=int(a)-1;			self.product=productsettings[index];			self.showDetail();			break;if __name__ == '__main__':	cls = Cls();	cls.showMainMenu();