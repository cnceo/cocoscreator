//用户管理
import BaseMgr from "../Libs/BaseMgr";
import LoginMgr from "./LoginMgr";

const IDENTITY_TYPE = {
	MEMBER:0,
	MANAGE:1,
	CAPTAIN:2,
}

window['IDENTITY_TYPE']=IDENTITY_TYPE;

export default class ClubMgr extends BaseMgr{
    //该俱乐部简化数据 key:index data:{id, icon, name, gameCount, diamond}
    clublist:any = {}
    /*该俱乐部详细数据 key:id  
    data:{id, icon, name, mCount, mMax, OpenGame, diamond, diamondMax, 
            captainId, notice, memberlist, gameList, applyList, blackList}
    memberlist:{id, icon, name, identity, 
            diamond, diamondMax}    fightRecord:{id, id}
    gameList:{id, name, type, pay, mCount, mMax, time, round}
    applyList:{id, icon, name}
    blackList:{id, icon, name}

    */
    clubinfo:any = {}

    routes:{} = null 
    //====== 
    uid:any = null 
    constructor (){
        super(); 
        this.clubinfo={};
        this.routes={
            'http.reqGetClubList':this.http_reqClubList,
            'http.reqGetClubInfo':this.http_reqClubInfo,
            "http.reqGetClubMember":this.http_reqGetClubMember,
        }
        this.testData();
    }
    //测试数据添加
    testData(){
        let testClubList = new Array();
        for (let i = 0; i< 2; i++){
            testClubList.push({
                id:333*(i+1), 
                icon:0, 
                name:"极其淫荡+"+i, 
                gameCount: 3,
                diamond:i*10,
            })
        }
        //测试数据
        this.http_reqClubList(testClubList)
        for (let i = 0; i< 2; i++){
            let memberTest = new Array(),
                gameTest = new Array(),
                applyTest = new Array(),
                blackTest = new Array();
            for (let j = 100; j >= 0; j--){
                memberTest.push({
                    id:100+j, 
                    icon:0, 
                    name:"哎人"+j, 
                    state:0,
                    identity:Math.max(0, j-98), 
                    diamond:j*10, 
                    diamondMax:1000,
                })
            }
            /*memberTest.sort((a, b)=>{
                if (a.identity === b.identity) {
                    return a.state - b.state;
                } else {
                    return  b.identity - a.identity;
                }
            });*/
            for (let j = 0; j< 3; j++){
                gameTest.push({
                    id:121+j, 
                    name:"小妹开的房间", 
                    type:(j%2)==1?"斗地主":"泉州麻将", 
                    pay:(j%2)==1?"房主支付 30":"俱乐部支付 30", 
                    mCount:1, 
                    mMax:(j%2)==1?3:4, 
                    time:"11:11", 
                    round:10,
                })
            }
            for (let j = 0; j< 3; j++){
                applyTest.push({
                    id:200+j, 
                    icon:0, 
                    name:"申请"+j+"号"
                })
            }
            for (let j = 0; j< 3; j++){
                blackTest.push({
                    id:300+j, 
                    icon:0, 
                    name:"黑名单"+j+"号"
                })
            }

            let testClubInfo = {
                id:333*(i+1), 
                icon:0, 
                name:"极其淫荡+"+i, 
                mCount:3, 
                mMax:100,
                openGame:1, 
                diamond:100, 
                captainId:103, 
                notice:"继续放荡+"+i, 
                memberlist:memberTest, 
                gameList:gameTest, 
                applyList:applyTest, 
                blackList:blackTest,
            }
            this.http_reqClubInfo(testClubInfo)
        }
    }
    //设置数据------------------------------------------------
    http_reqClubInfo(msg) {
        /*msg.gameList = {};
        msg.applyList = {};
        msg.blackList = {};*/
        this.clubinfo[msg.id]=msg;
    }
    http_reqClubList(msg){
        this.clublist=msg;
        if (this.clubinfo.length == 0 && this.clublist.length != 0){
            this.reqGetClubInfo(this.clublist[0].id)
        }
    }
    http_reqGetClubMember(msg){
        this.clubinfo[msg.id].memberlist = this.clubinfo[msg.id].memberlist.concat(msg.memberlist);
    }
    //获取俱乐部的信息
    reqClubInfo(){
        //this.send_msg('http.reqMyInfo');
    }
    //临时测试数据函数-------------------------------------------------
    //申请列表设置函数
    addApplyData(id, data){
        this.clubinfo[id].applyList.putsh(data)
    }
    removeApplyData(id, index){
        this.clubinfo[id].applyList.splice(index,1)
    }
    //黑名单列表设置函数
    addBlackData(id, data){
        this.clubinfo[id].blackList.putsh(data)
    }
    removeBalckData(id, index){
        this.clubinfo[id].blackList.splice(index,1)
    }

    //获取数据-------------------------------------------------
    getClubList(){
        return this.clublist;
    }
    getClubInfo(id){
        return this.clubinfo[id];
    }
    getClubMemberList(id){
        return this.clubinfo[id].memberlist;
    }
    getClubGameList(id){
        return this.clubinfo[id].gameList;
    }
    getClubApplyList(id){
        return this.clubinfo[id].applyList;
    }
    getClubBlackList(id){
        return this.clubinfo[id].blackList;
    }
    //获取用户信息
    reqClubs(uids){
    }
    getHeadPng(headid){
        let webRootUrl=LoginMgr.getInstance().getWetRootUrl();
        // body
        return `${webRootUrl}/images/default_${headid}.png`
    } 
    reqCreate(icon, name){
        let clubinfo={
            'avater':icon, 
            'name':name,
        }
        this.send_msg('http.reqClubCreate',clubinfo);
    }
    reqGetClubList(){
        this.send_msg('http.reqGetClubList');
    }

    reqGetClubInfo(club_id){
        let clubinfo={
            'id':club_id, 
        }
        this.send_msg('http.reqGetClubInfo', clubinfo);
    }

    reqGetClubMember(club_id, begin, ended){
        let clubinfo={
            'id':club_id,
            'begin':begin,
            'ended':ended, 
        }
        this.send_msg('http.reqGetClubMember', clubinfo);
    }
 
    //单例处理
    private static _instance:ClubMgr;
    public static getInstance ():ClubMgr{
        if(!this._instance){
            this._instance = new ClubMgr();
        }
        return this._instance;
    }
}